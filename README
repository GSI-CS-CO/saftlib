Saftlib - Simplified API for Timing

GSI timing receivers include a large collection of slave devices. Saftlib
provides a user-friendly software interface for controlling these slaves.
The process saftd shares access to these hardware resources on behalf of
multiple client programs. Clients connect to saftd using the
saftlib library.

A simple example:

  // Get a list of all devices managed by saftlib
  map<std::string, std::string> devices = SAFTd_Proxy::create()->getDevices();

  // Create a proxy object for the first timing receiver
  std::shared_ptr<TimingReceiver_Proxy> receiver = TimingReceiver_Proxy::create(devices.front().second);

  // Print the value of the Locked property
  std::cout << "Locked: " << receiver->getLocked() << std::endl;

  // Run a callback when this changes
  receiver->SigLocked.connect(sigc::ptr_fun(&on_locked_callback));

  // Wait forever, running callbacks
  while(true) {
    saftlib::wait_for_signal();
  }

Documentation for available objects can be found in:
  /usr/share/doc/saftlib

Compilation flags available with:
  pkg-config --cflags saftlib
  pkg-config --libs saftlib

