// @file saft-dm.cpp
// @brief Command-line interface for a local Data Master (dm). This tool
// allows to inject schedules with timing messages into the ECA. By this
// precisely timed actions can be generated by the ECA locally, if a
// central data master is not available on the timing network.
// @author Dietrich Beck  <d.beck@gsi.de>
//
// Copyright (C) 2016 GSI Helmholtz Centre for Heavy Ion Research GmbH 
//
// Have your personal Data Master
//
//*****************************************************************************
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//*****************************************************************************
//

#define __STDC_FORMAT_MACROS
#define __STDC_CONSTANT_MACROS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <giomm.h>

#include <time.h>
#include <sys/time.h>
#include <stdio.h>
#include <string.h>
#include <inttypes.h>

#include "interfaces/SAFTd.h"
#include "interfaces/TimingReceiver.h"
#include "interfaces/SoftwareActionSink.h"
#include "interfaces/SoftwareCondition.h"
#include "interfaces/iDevice.h"
#include "interfaces/iOwned.h"
#include "src/CommonFunctions.h"

using namespace std;

static const char* program;

using namespace saftlib;
using namespace std;

// display help
static void help(void) {
  std::cout << std::endl << "Usage: " << program << " <device name> [OPTIONS] <file name>" << std::endl;
  std::cout << std::endl;
  std::cout << "  -h                   display this help and exit" << std::endl;
  std::cout << "  -f                   use the first attached device (and ignore <device name>)" << std::endl;
  std::cout << "  -p                   schedule will be added to next full second (option -p) or current time (option unused)" << std::endl; 
  std::cout << std::endl;

  std::cout << "  The file must contain exactly one message per line. Each line must have the following format:" << std::endl;
  std::cout << "  '<eventID> <param> <time>', example: '0x1111000000000000 0x0 123000000', time [ns] and decimal." << std::endl;
  std::cout << std::endl;

  std::cout << "Report bugs to <d.beck@gsi.de> !!!" << std::endl;
  std::cout << "Licensed under the GPL v3." << std::endl;
  std::cout << std::endl;
} // help


int main(int argc, char** argv)
{
  // variables and flags for command line parsing
  int  opt;
  bool ppsAlign       = false;
  bool useFirstDev    = false;

  // variables inject event

  guint64 eventID     = 0x0;     // full 64 bit EventID contained in the timing message
  guint64 eventParam  = 0x0;     // full 64 bit parameter contained in the tming message
  guint64 eventTime   = 0x0;     // time for event (this value is added to the current time or the next PPS, see option -p
  guint64 startTime   = 0x0;     // time for start of schedule in PTP time
  guint64 wrTime      = 0x0;     // current WR time

  // variables attach, remove
  char    *deviceName = NULL;
  string  line;
  
  const char *filename;

  // parse for options
  program = argv[0];
  while ((opt = getopt(argc, argv, "phf")) != -1) {
    switch (opt) {
    case 'f' :
      useFirstDev = true;
      break;
    case 'p':
      ppsAlign = true;
      break;
    case 'h':
      help();
      return 0;
    default:
      std::cerr << program << ": bad getopt result" << std::endl;
      return 1;
    } // switch opt
  }   // while opt
  
  if (optind >= argc) {
    std::cerr << program << " expecting one non-optional argument: <device name>" << std::endl;
    help();
    return 1;
  }
  
  deviceName = argv[optind];
  
  // parse for filename
  filename = "";
  if (optind + 1< argc) filename = argv[optind+1];
  else std::cerr << program << ": expecting non-optional argument <file name> " << std::endl;
  if (strlen(filename) == 0) std::cerr << program << ": illegal file name" << std::endl;

  // no parameters, no command: just display help and exit
  if ((optind == 1) && (argc == 1)) {
    help();
    return 0;
  }
  
  try {
    // initialize required stuff
    Gio::init();
    Glib::RefPtr<SAFTd_Proxy> saftd = SAFTd_Proxy::create();
    
	// get a specific device
    map<Glib::ustring, Glib::ustring> devices = SAFTd_Proxy::create()->getDevices();
    Glib::RefPtr<TimingReceiver_Proxy> receiver;
    switch (useFirstDev) {
    case true  :
      receiver = TimingReceiver_Proxy::create(devices.begin()->second);
      break;
    case false :
      if (devices.find(deviceName) == devices.end()) {
        std::cerr << "Device '" << deviceName << "' does not exist" << std::endl;
        return -1;
      } // find device
      receiver = TimingReceiver_Proxy::create(devices[deviceName]);
      break;
    default :
      return 1;
    } //switch useFirstDevice;

	wrTime    = receiver->ReadCurrentTime();
	if (ppsAlign) startTime = (wrTime - (wrTime % 1000000000)) + 1000000000;  //align schedule to next PPS
	else          startTime = wrTime;                                         //align schedule to current WR time
	
	ifstream myfile (filename);
	if (myfile.is_open()) {
	  while (getline (myfile,line)) {
		std::stringstream stream(line);
		stream >> std::hex >> eventID;
		stream >> std::hex >> eventParam;
		stream >> std::dec >> eventTime;
		std::cout << std::dec << eventTime << std::hex << " 0x" << eventID << " 0x" << eventParam << std::endl;

    	receiver->InjectEvent(eventID, eventParam, startTime + eventTime);
	  }
	  myfile.close();
	}
	else std::cerr << "Unable to open file" << std::endl; 
		
      
  } catch (const Glib::Error& error) {
    std::cerr << "Failed to invoke method: " << error.what() << std::endl;
  }
  
  return 0;
}



