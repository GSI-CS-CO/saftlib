<node xmlns:xi="http://www.w3.org/2001/XInclude" name="BurstGenerator">
  <annotation name="de.gsi.saftlib.name" value="de.gsi.saftlib"/>

  <!-- Include base interfaces -->
  <xi:include href="Owned.xml"/>

  <!-- de.gsi.saftlib.BurstGenerator:
      @short_description: Burst generation service

      A dedicated firmware must be loaded and running in the embedded LM32 core
      prior to the burst generation. The methods and signals of this interface
      are responsible to inform about the underlying hardware, firmware and
      load the firmware binary if necessary.
   -->
  <interface name="de.gsi.saftlib.BurstGenerator">

    <!-- instruct: Instruction to the burst generator.
         It is a common method to communicate with the burst generator.
         The method contains an instruction code and corresponding arguments.

         @code:   User instruction code for LM32
         @args:   Instruction arguments (vector of u32 integers)
         @result: Return result. 0 on success.
      -->
    <method name="instruct">
      <arg direction="in" type="u" name="code"/>
      <arg direction="in" type="au" name="args"/>
      <arg direction="out" type="i" name="result"/>
    </method>

    <!-- readBurstInfo: Get burst info.
         The info includes the type and index of IO port, IDs of trigger and toggling events.

         @id:     The burst ID
         @info:   The burst info (vector of u32 integers)
      -->
    <method name="readBurstInfo">
      <arg direction="in" type="u" name="id"/>
      <arg direction="out" type="au" name="info"/>
    </method>

    <!-- readSharedBuffer: Read the shared memory.

         @size:   The amount of data to be read
         @data:   The read data
      -->
    <method name="readSharedBuffer">
      <arg direction="in" type="u" name="size"/>
      <arg direction="out" type="au" name="data"/>
    </method>

    <!-- readState: Read the actual state of the burst generator.

         @state:   Actual state of the burst generator
      -->
    <method name="readState">
      <arg direction="out" type="u" name="state"/>
    </method>

    <!-- sigInstComplete: Notify the completion of an instruction.
         It is the response of the burst generator on user instruction request.

         @code:   User instruction code
      -->
    <signal name="sigInstComplete">
      <arg name="code" type="u"/>
    </signal>

    <!-- Response: The burst generator response sent via mailbox.
      -->
    <property name="Response" type="u" access="read"/>

  </interface>
</node>
