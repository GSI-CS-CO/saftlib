<node xmlns:xi="http://www.w3.org/2001/XInclude" name="SoftwareActionSink">
  <annotation name="de.gsi.saftlib.name" value="de.gsi.saftlib"/>
  
  <!-- Include base interfaces -->
  <xi:include href="Owned.xml"/>
  <xi:include href="ActionSink.xml"/>
  
  <!-- de.gsi.saftlib.SoftwareActionSink:
      @short_description: An output through which software actions flow.
      
      A SoftwareActionSink guarantees ordered execution of all callbacks
      on SoftwareConditions created via the NewCondition method. Each
      SoftwareActionSink is independent of all others, so a single 
      program may operate in isolation without concern about potential
      conflicting rules from other clients on the same machine.
      
      A SoftwareActionSink is both an ActionSink and Owned.
      
      If two SoftwareConditions are created on the same SoftwareActionSink
      which require simultaneous delivery of two Actions, then they will be
      delivered in arbitrary order, both having the 'conflict' flag set.
   -->
  <interface name="de.gsi.saftlib.SoftwareActionSink">
    <!-- NewCondition: Create a condition to match incoming events
         @active: Should the condition be immediately active
         @first:  First event ID to monitor (inclusive)
         @last:   Last event ID to monitor (inclusive)
         @offset: Delay in ECA clock cycles between event and action
         @guards: The specified guard must be true 4us before action
         @result: Object path to the created SoftwareCondition

         This method creates a new condition that matches events whose
         identifier lies in the range [first, last]. The offset acts as a
         delay which is added to the event's execution timestamp to
         determine the timestamp when the matching condition fires its
         action. The returned object path is a SoftwareCondition object.
      -->
    <method name="NewCondition">
      <arg direction="in" type="b" name="active"/>
      <arg direction="in" type="t" name="first"/>
      <arg direction="in" type="t" name="last"/>
      <arg direction="in" type="x" name="offset"/>
      <arg direction="in" type="u" name="guards"/>
      <arg direction="out" type="s" name="result"/>
    </method>
  </interface>
</node>
