<node xmlns:xi="http://www.w3.org/2001/XInclude" name="MILbusActionSink">
  <annotation name="de.gsi.saftlib.name" value="de.gsi.saftlib"/>
  
  <!-- Include base interfaces -->
  <xi:include href="Owned.xml"/>
  <xi:include href="ActionSink.xml"/>
  
  <!-- de.gsi.saftlib.MILbusActionSink:
      @short_description: An output through which MILbus actions flow.
      
      This inteface allows the generation of MIL timing events.
      A MILbusActionSink is also an ActionSink and Owned.
      
      If two SoftwareConditions are created on the same SoftwareActionSink
      which require simultaneous delivery of two Actions, then they will be
      delivered in arbitrary order, both having the 'conflict' flag set.
   -->
  <interface name="de.gsi.saftlib.MILbusActionSink">
    <!-- NewCondition: Create a condition to match incoming events
         @active: Should the condition be immediately active
         @id:     Event ID to match incoming event IDs against
         @mask:   Set of bits for which the event ID and id must agree
         @offset: Delay in nanoseconds between event and action
         @guards: The specified guard must be true 4us before action
         @tag:    The  16-bit value to send on the MILbus
         @result: Object path to the created MILbusCondition

         This method creates a new condition that matches events whose
         identifier lies in the range [id & mask, id | ~mask].  The offset
         acts as a delay which is added to the event's execution timestamp
         to determine the timestamp when the matching condition fires its
         action.  The returned object path is a MILBUSCondition object.
      -->
    <method name="NewCondition">
      <arg direction="in" type="b" name="active"/>
      <arg direction="in" type="t" name="id"/>
      <arg direction="in" type="t" name="mask"/>
      <arg direction="in" type="x" name="offset"/>
      <arg direction="in" type="u" name="guards"/>
      <arg direction="in" type="q" name="tag"/>
      <arg direction="out" type="s" name="result"/>
    </method>
    
    <!-- InjectTag: Directly generate a MILbus timing event.
         @tag: The 16-bit value to push to the MILbus.
         
         For debugging, it can be helpful to simply create MILbus events
         without a matching timing event.
      -->
    <method name="InjectTag">
      <arg direction="in" type="q" name="tag"/>
    </method>
  </interface>
</node>
