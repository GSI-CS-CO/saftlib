<!-- de.gsi.saftlib.ActionSink:
     @short_description: An output through which actions flow.
     
     Conditions created on this ActionSink specify which timing events are
     translated into actions. These actions have execution timestamps which
     determine when the action is to be executed, precise to the nanosecond.
     
     More specialized versions of this interface provide the 'NewCondition'
     method to create conditions specific to the type of ActionSink.  For
     example, SoftwareActionSinks create conditions that emit signals to
     software.  This interface captures the functionality common to all
     ActionSinks, such as atomic toggle, offset constraints, and
     introspection. In particular, ActionSinks have common failure modes.
     
     Actions are queued for delivery at the appropriate time, in hardware. 
     Hardware has limited storage, reflected by the Fill, Capacity, and
     MostFull properties.  These should be monitored to ensure that the
     queue never overflows. 
     
     The first failure mode of an ActionSink is that the queue overflows. 
     In this case, the hardware drops an action.  Obviously, this is a
     critical error which may result in an undefined state.  To prevent
     these failures, MostFull should be kept below some safety margin with
     respect to Capacity.  Note: several distinct ActionSinks may share
     underlying hardware, and the Fill property is shared amongst all
     instances.  Each overflow is recorded in the OverflowCount register. 
     Due the rate at which this counter might increase, the API throttles
     updates using the SignalRate property.
     
     Another critical error for an ActionSink is the possibility of a
     late action.  This indicates that hardware was instructed to execute an
     action at a time in the past.  This is typically caused by either a
     malfunctioning data master, desynchronized clocks, or conditions with
     large negative offsets.  This is a critical failure as it might leave
     the system in an undefined state.  Conditions may be configured to
     either drop or execute late actions.  If late actions are dropped, a
     magnet might never be turned off.  If late actions are executed, a
     magnet might be turned on again after it was supposed to be turned off
     (ie: the actions get misordered).  In any case, LateCount is increased.
     
     Similar to late actions, one can also have early actions. If an action
     is scheduled for execution too far into the future, the timing receiver
     will choose to mark it as early. This prevents these actions from
     permanently consuming space in the finite hardware buffers. Early
     actions are also critical failures as it can leave the system in an
     undefined state, just as a late action. Conditions may be configured to
     either drop or execute early actions.
     
     The final misordering failure for an ActionSink is the possibilty of a
     Conflict.  If two actions are scheduled to be executed at the same
     nanosecond, their relative order is undefined.  These conflicts are a
     critical error as they may leave the system in an undefined state, just
     as with early and late actions.  Conflicts should be prevented by never
     creating two Conditions on the same ActionSink which could occur at the
     same time.  Note that it is NOT a Conflict for two actions to be
     executed at the same time by two different ActionSinks.  For software,
     this means that two programs, each with their own SoftwareActionSink do
     not need to be concerned about conflicts between their schedules.  As
     another example, two different LEMO output cables (corresponding to two
     OutputActionSinks) can be toggled high at the same time.
     
     Finally, these is the possibility of a delayed action. Unlike late,
     early, and conflicting actions, delayed actions are never misordered. 
     Thus, delayed actions are typically not as severe a failure mode, and
     Conditions default to allowing their execution.  Delays can happen when
     the delivery rate of actions (potentially 1GHz) exceeds the capability
     of the receiver to process the actions.  For example, an output might
     require 100ns to deliver an action.  If two actions are scheduled for
     delivery back-to-back with 1ns between, the second action is delayed. 
     For SoftwareActionSinks, delays can probably always be ignored because
     the handler is much much slower than the hardware.  For a kicker, on
     the other hand, a delay is probably a critical error.
  -->
<interface name="de.gsi.saftlib.ActionSink">
  <!-- AllConditions: All conditions created on this ActionSink.
       All active and inactive conditions on the ActionSink.
       Each object path implements the the matching Condition interface;
       for example, a SoftwareActionSink will have SoftwareConditions.
    -->
  <property name="AllConditions" type="as" access="read"/>
  
  <!-- ActiveConditions: All active conditions created on this ActionSink.
       All active conditions on the ActionSink.
       Each object path implements the the matching Condition interface;
       for example, a SoftwareActionSink will have SoftwareConditions.
    -->
  <property name="ActiveConditions" type="as" access="read"/>
  
  <!-- InactiveConditions: All inactive conditions created on this ActionSink.
       All inactive conditions on the ActionSink.
       Each object path implements the the matching Condition interface;
       for example, a SoftwareActionSink will have SoftwareConditions.
    -->
  <property name="InactiveConditions" type="as" access="read"/>
  
  <!-- ToggleActive: Atomically toggle the active status of conditions.
       When reconfiguring an ActionSink, it is sometimes necessary to apply
       many changes simultaneously.  To achieve this, simply use
       NewCondition to create all the new conditions in the inactive state. 
       Then use this method to simultaneous toggle all conditions on this
       ActionSink.  The new active conditions will be applied such that on
       one nanosecond, the old set is active and on the next nanosecond the
       new set is active.
    -->
  <method name="ToggleActive"/>
  
  <!-- MinOffset: Minimum allowed offset (nanoseconds) usable in NewCondition.
       Large offsets are almost always an error. A very negative offset
       could result in Late actions.  By default, no condition may be
       created with an offset smaller than -100us.  Attempts to create
       conditions with offsets less than MinOffset result in an error. 
       Change this property to override this safety feature.
    -->
  <property name="MinOffset" type="x" access="readwrite"/>
  
  <!-- MaxOffset: Maximum allowed offset (nanoseconds) usable in NewCondition.
       Large offsets are almost always an error. A large positive offset
       could result in early actions being created.  By default, no
       condition may have an offset larger than 1s.  Attempts to create
       conditions with offsets greater than MaxOffset result in an error. 
       Change this property to override this safety feature.
    -->
  <property name="MaxOffset" type="x" access="readwrite"/>

  <!-- Latency: Nanoseconds between event and earliest execution of an action.
    -->
  <property name="Latency" type="t" access="read">
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
  </property>
    
  <!-- EarlyThreshold: Actions further into the future than this are early.
       If an action is scheduled for execution too far into the future, it
       gets truncated to at most EarlyThreshold nanoseconds into the future.
    -->
  <property name="EarlyThreshold" type="t" access="read">
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
  </property>
  
  <!-- Capacity: The maximum number of actions queueable without Overflow.
       The timing receiver hardware can only queue a limited number of
       actions.  This property reports the maximum number of actions that
       may be simultaneously queued.  Be aware that this resource may be
       shared between multiple ActionSinks.  For example, all
       SoftwareActionSinks share a common underlying queue in hardware. 
       This Capacity represents the total size, which must be shared.
    -->
  <property name="Capacity" type="q" access="read">
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
  </property>
  
  <!-- ReadFill: Report the number of currently pending actions.
       The timing receiver hardware can only queue a limited number of
       actions.  This method reports the current number of queued actions,
       which includes actions from all users of the underlying hardware.  So
       two programs each using a SoftwareActionSink will potentially see an
       increase in this value when both programs are active.  Also, this
       value can change very rapidly and is thus changes are not signalled. 
       Polling it is likely to miss short fluctuations.  See MostFull for a
       better approach to monitoring.
    -->
  <method name="ReadFill">
    <arg direction="out" type="q" name="result"/>
  </method>
  
  <!-- MostFull: Report the largest number of pending actions seen.
       The timing receiver hardware can only queue a limited number of
       actions.  This property reports the highest Fill level seen by the
       hardware since it was last reset to 0.  Keep in mind that the queue
       may be shared, including actions from all users of the underlying
       hardware.  So two programs each using a SoftwareActionSink will
       potentially see an increase in this value when both programs are
       active.
    -->
  <property name="MostFull" type="q" access="readwrite"/>
  
  <!-- SignalRate: Minimum interval between updates (nanoseconds, default 100ms).
       The properties OverflowCount, ActionCount, LateCount, EarlyCount,
       ConflictCount, and DelayedCount can increase rapidly. To prevent
       excessive CPU load, SignalRate imposes a minimum cooldown between
       updates to these values.
    -->
  <property name="SignalRate" type="t" access="readwrite"/>
  
  <!-- OverflowCount: The number of actions lost due to Overflow.
       
       The underlying hardware queue may overflow once Fill=Capacity. This
       is a critical error condition that must be handlded.  The causes may
       be either: 1- the actions have an execution time far enough in the
       future that too many actions are buffered before they are executed,
       or 2- the receiving component is unable to execute actions as quickly
       as the timing system delivers them.  The second case is particularly
       likely for SoftwareActionSinks that attempt to listen to high
       frequency events.  Even though SoftwareActionSinks share a common queue, 
       Overflow is reported only to the ActionSink whose action was dropped.
       
       As overflows can occur very rapidly, OverflowCount may increase by
       more than 1 between emissions. There is a minimum delay of SignalRate
       nanoseconds between updates to this property.
    -->
  <property name="OverflowCount" type="t" access="readwrite"/>
  
  <!-- ActionCount: The number of actions processed by the Sink.
       
       As actions can be emitted very rapidly, ActionCount may increase by
       more than 1 between emissions. There is a minimum delay of SignalRate
       nanoseconds between updates to this property.
    -->
  <property name="ActionCount" type="t" access="readwrite"/>
  
  <!-- LateCount: The number of actions delivered late.
  
       As described in the interface overview, an action can be late due to
       a buggy data master, loss of clock synchronization, or very negative
       condition offsets.  This is a critical failure as it can result in
       misordering of executed actions.  Each such failure increases this
       counter.  
       
       As late acitons can occur very rapidly, LateCount may increase by
       more than 1 between emissions. There is a minimum delay of SignalRate
       nanoseconds between updates to this property.
    -->
  <property name="LateCount" type="t" access="readwrite"/>
  
  <!-- Late:      An example of a late action since last LateCount change.
       @count:    The new value of LateCount when this signal was raised.
       @event:    The event identifier of the late action.
       @param:    The parameter field, whose meaning depends on the event ID.
       @deadline: The desired execution timestamp (event time + offset).
       @executed: The actual execution timestamp.

       Keep in mind that an action is only counted as late if it is
       scheduled for the past.  An action which leaves the timing receiver
       after its deadline, due to a slow consumer, is a delayed (not late)
       action.
    -->
  <signal name="Late">
    <arg name="count"    type="u"/>
    <arg name="event"    type="t"/>
    <arg name="param"    type="t"/>
    <arg name="deadline" type="t"/>
    <arg name="executed" type="t"/>
  </signal>
  
  <!-- EarlyCount: The number of actions delivered early.
  
       As described in the interface overview, an action can be early due to
       a buggy data master, loss of clock synchronization, or very positive
       condition offsets.  This is a critical failure as it can result in
       misordering of executed actions.  Each such failure increases this
       counter.  
       
       As early acitons can occur very rapidly, EarlyCount may increase by
       more than 1 between emissions. There is a minimum delay of SignalRate
       nanoseconds between updates to this property.
    -->
  <property name="EarlyCount" type="t" access="readwrite"/>
  
  <!-- Early:     An example of an early action since last EarlyCount change.
       @count:    The new value of LateCount when this signal was raised.
       @event:    The event identifier of the early action.
       @param:    The parameter field, whose meaning depends on the event ID.
       @deadline: The desired execution timestamp (event time + offset).
       @executed: The actual execution timestamp.
    -->
  <signal name="Early">
    <arg name="count"    type="u"/>
    <arg name="event"    type="t"/>
    <arg name="param"    type="t"/>
    <arg name="deadline" type="t"/>
    <arg name="executed" type="t"/>
  </signal>
  
  <!-- ConflictCount: The number of actions which conflicted. 
  
       If two actions should have been executed simultaneously by the same
       ActionSink, they are executed in an undefined order. Each time this
       happens, the ConflictCount is increased. 
       
       As conflicts can occur very rapidly, ConflictCount may increase by
       more than 1 between emissions. There is a minimum delay of SignalRate
       nanoseconds between updates to this property.
    -->
  <property name="ConflictCount" type="t" access="readwrite"/>
  
  <!-- Conflict:  An example of a conflict since last ConflictCount change.
       @count:    The new value of ConflictCount when this signal was raised.
       @event:    The event identifier of a conflicting action.
       @param:    The parameter field, whose meaning depends on the event ID.
       @deadline: The scheduled action execution timestamp (event time + offset).
       @executed: The timestamp when the action was actually executed.
    -->
  <signal name="Conflict">
    <arg name="count"    type="t"/>
    <arg name="event"    type="t"/>
    <arg name="param"    type="t"/>
    <arg name="deadline" type="t"/>
    <arg name="executed" type="t"/>
  </signal>
  
  <!-- DelayedCount: The number of actions which have been delayed.
  
       The timing receiver emits actions potentially every nanosecond. In
       the case that the receiver cannot immediately process an action, the
       timing receiver delays the action until the receiver is ready. This
       can happen either because the receiver was still busy with a previous
       action or the output was used externally (bus arbitration).
       
       As actions can be emitted very rapidly, DelayedCount may increase by
       more than 1 between emissions. There is a minimum delay of SignalRate
       nanoseconds between updates to this property.
    -->
  <property name="DelayedCount" type="t" access="readwrite"/>
  
  <!-- Delayed:   An example of a delayed action the last DelayedCount change.
       @count:    The value of DelayedCount when this signal was raised.
       @event:    The event identifier of the delayed action.
       @param:    The parameter field, whose meaning depends on the event ID.
       @deadline: The desired execution timestamp (event time + offset).
       @executed: The timestamp when the action was actually executed.
    -->
  <signal name="Delayed">
    <arg name="count"    type="t"/>
    <arg name="event"    type="t"/>
    <arg name="param"    type="t"/>
    <arg name="deadline" type="t"/>
    <arg name="executed" type="t"/>
  </signal>
  
</interface>
