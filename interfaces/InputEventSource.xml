<!-- de.gsi.saftlib.InputEventSource:
    @short_description: An input used to generate timing events
    
    An InputEventSource is also an EventSource and Owned.
    
    InputEventSources generate two events: high and low transition.
    These are encoded in the resulting event ID's lowest bit.
 -->
<interface name="de.gsi.saftlib.InputEventSource">

  <!-- StableTime: Deglitch threshold for the input
       The number of nanoseconds a signal must remain high or low in order
       to be considered a valid transition. Increasing this value will not
       impact the resulting timestamps, but will hide transitions smaller
       than the threshold. For example, if StableTime=400, then a 5MHz
       signal would be completely ignored.
    -->
  <property name="StableTime" type="u" access="readwrite"/>
  
  <!-- Termination: Set the input termination
       Some inputs need termination to receive a clean input signal. 
       However, if the same IO is used as an Output, termination should
       probably be disabled.  This defaults to on.  See also OutputEnable if
       this is an Inoutput.
    -->
  <property name="InputTermination" type="b" access="readwrite"/>
  
  <!-- ReadInput: Read the current input value.
       For Inoutputs, this may differ from the Output value, if OutputEnable
       is false.  To receive a signal on Input changes, use the EventSource
       interface to create timing events and monitor these via a
       SoftwareActionSink.
    -->
  <method name="ReadInput">
    <arg direction="out" type="b" name="result"/>
  </method>
  
  <!-- InputTerminationAvailable: Can (input) termination be configured.
    -->
  <property name="InputTerminationAvailable" type="b" access="read">
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
  </property>
  
  <!-- SpecialPurposeInAvailable: Can special configuration be configured.
    -->
  <property name="SpecialPurposeInAvailable" type="b" access="read">
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
  </property>
  
  <!-- LogicLevelIn: Logic level of the input (LVDS, LVTTL, ...)
    -->
  <property name="LogicLevelIn" type="s" access="read">
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
  </property>
  
</interface>
