<node>
  <!-- de.gsi.saftlib.ECA_Condition:
       @short_description: A rule matched against incoming events
       
       This object provides describes a condition in the ECA. You can
       monitor the condition to receive matching actions via software. 
    -->
  <interface name="de.gsi.saftlib.ECA_Condition">
    <!-- First: The first event identifier which this condition matches.
      -->
    <property name="First"  type="t" access="read"/>
    <!-- Last: The first event identifier which this condition does not match.
      -->
    <property name="Last"   type="t" access="read"/>
    <!-- Offset: Added to an event's time to calculate the action's time.
      -->
    <property name="Offset" type="x" access="read"/>
    <!-- Tag: Indicates to a hardware channel the desired action on matches.
      -->
    <property name="Tag"    type="u" access="read"/>
    
    <!-- Owner: The dbus client which owns this condition.
         When the owning client disconnects, this condition will be
         automatically destroyed. If this behaviour is not desired,
         see the Disown method.
      -->
    <property name="Owner"  type="s" access="read"/>
    
    <!-- Disown: Release ownership of the condition.
         This method may only be invoked by the current owner of the
         condition. Upon completion, the condition has no owner and will
         persist until its Delete method is called.
      -->
    <method name="Disown"/>
    
    <!-- Delete: Remove this condition from the ECA table.
         This method may only be invoked by the current owner of the
         condition. However, if the condition has been disowned, it may
         be invoked by anyone.
      -->
    <method name="Delete"/>
    
    <!-- SoftwareActive: Should this condition fire the Action signal.
         When true, the Action signal will be emitted whenever a matching
         timing event is received by the ECA. Even if no clients listen to
         the Action signal, software must still handle any conditions with
         SoftwareActive true, possibly leading to Overflow.
      -->
    <property name="SoftwareActive" type="b" access="readwrite"/>
    
    <!-- Action:    Emitted whenever the condition matches a timing event.
         @event:    The event identifier that matched this rule.
         @param:    The parameter field, whose meaning depends on the event ID.
         @time:     The action execution timestamp (event time + offset).
         @tef:      The timing extension field.
         @late:     The action was not delivered on time by hardware.
         @conflict: The action arrived at the same time as another.
         
         The Action signal is only generated if SoftwareActive is true.
         While the underlying hardware will deliver the action at precisely
         time-o-clock, the software stack adds non-deterministic delay, so
         the time field may be milliseconds in the past. The late field only
         indicates if the hardware was unable to meet the requested
         deadline. The saftlib guarantees that a single timing message can
         never lead to conflicting actions. It does this by combining
         overlapping conditions at the software level and dispatching the
         single resulting action to all interested clients. However, two
         different timing messages may still lead to conflicting actions.
      -->
    <signal name="Action">
      <arg name="event"    type="t"/>
      <arg name="param"    type="t"/>
      <arg name="time"     type="t"/>
      <arg name="tef"      type="u"/>
      <arg name="late"     type="b"/>
      <arg name="conflict" type="b"/>
    </signal>
    
    <!-- HardwareActive: Should this condition fire actions to the channel.
         When true, the receiving component hardware on the other end of the
         Channel will be delivered the action at exactly the specified time.
         The meaning of the action depends on how the receiving component
         interprets the tag field. This field has no effect if Channel is
         null.
      -->
    <property name="HardwareActive" type="b" access="readwrite"/>
    
    <!-- Channel: The channel to which actions are delivered.
         This property is only set if the condition was created via the
         NewCondition method on an ECA_Channel.
      -->
    <property name="Channel" type="i" access="read"/>
  </interface>
</node>
